\contentsline {subsection}{1.\nobreakspace {}(\S 1.4)\nobreakspace {}lily got rid of well-defined.}{18}{todo.1}%
\contentsline {subsection}{2.\nobreakspace {}(\S 3.5)\nobreakspace {}might depend on private key being separate from password?}{29}{todo.2}%
\contentsline {subsection}{3.\nobreakspace {}(\S 4.3)\nobreakspace {}examples?}{38}{todo.3}%
\contentsline {subsection}{4.\nobreakspace {}(\S 4.3)\nobreakspace {}example use of recordupdate (take from design?)}{41}{todo.4}%
\contentsline {subsection}{5.\nobreakspace {}(\S 5.5)\nobreakspace {}Reveal credentials let Edna\xspace recursively decrypt speaks-for records, and create a \emph {speaks-for chain} starting from the disguising user, represented by speaks-for relationships between pseudoprincipals. Edna\xspace can then disguise all data of all pseudoprincipals included in the speaks-for chain.}{54}{todo.5}%
\contentsline {subsection}{6.\nobreakspace {}(\S 5.8)\nobreakspace {}?}{59}{todo.6}%
\contentsline {subsection}{7.\nobreakspace {}(\S 8.3)\nobreakspace {}Edna\xspace 's storage thus produce noticeable overheads, but allow users to reveal their data without storing disguised data external to the application. Furthermore, a substantial (30MB) portion of the added applications storage would already incur with Edna\xspace for an application to perform fine-grained decorrelation, such as adding pseudoprincipals to the application database. These overheads also mostly lie in disk storage---a historically cheap medium---but \S \ref {s:deploying} discusses potential ways to prevent Edna\xspace overheads from overly costing applications. }{75}{todo.7}%
\contentsline {subsection}{8.\nobreakspace {}(\S 8.3)\nobreakspace {}font?}{75}{todo.8}%
\contentsline {subsection}{9.\nobreakspace {}(\S 8.3)\nobreakspace {}malte's comment about speed}{76}{todo.9}%
\contentsline {subsection}{10.\nobreakspace {}(\S 8.3)\nobreakspace {}not comparable to facebook!}{76}{todo.10}%
